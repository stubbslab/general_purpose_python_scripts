from ApproximateFourierTransform import ApproximateFourierTransform
from computeDistributionOfFourierModesOfFunction import measureLikelihoodOfFunctionGivenData
from readInArchiveSpread import readInArchiveSpread 
import numpy as np
import math
import scipy.optimize as optimize

#You're guesses MUST sit above and below the contour you're hoping to hit.  Otherwise, the algorithm will not converge. 

def measureFourierBounds (xs, ys, y_errs, single_var_function, init_low_guess, init_high_guess, bounds, archive_spread_file = None, windowing_funct = 'rect', max_n_draw = 100, target_n_chi_sqr_sigmas_from_archive = 3.0, frequencies_to_use = 'all'):
    archive_data = readInArchiveSpread(file_name = archive_spread_file)

    params_index = 3
    freq_index = 1
    chi_sqr_index = 0

    frequencies = archive_data[freq_index]
    if frequencies_to_use is 'all':
        frequencies_to_use = frequencies

    archive_chi_sqr = archive_data[chi_sqr_index]
    target_chi_sqr = archive_chi_sqr + math.sqrt(2 * arhive_chi_sqr) * target_n_chi_sqr_sigmas_from_archive

    extra_factor_for_guessing_peaks_of_dist = 2.0 
    min_chi_sqr_separation = lambda n_draws_determining_chi_sqr: ((math.sqrt(2 * len(frequencies)) * target_n_chi_sqr_sigmas_from_archive)
                                                                   * ( extra_factor_for_guessing_peaks_of_dist / np.sqrt(n_draws_determining_chi_sqr) )
                                                                  )
    

    true_fourier_trans = ApproximateFourierTransform(xs, ys, y_errs, frequencies = frequencies_to_use, windowing_funct = windowing_funct)
    true_mags = true_fourier_trans.normalized_coef_mags 
    
    widths = [params[1] for params in archive_data[params_index]]

    low_param_bound = init_low_guess
    high_param_bound = init_high_guess

    has_converged = 0

    while not (has_converged):
        #Now regenerated random data until a peak can be determined with sufficient confidence to say which side of our desired contour it is on.
        new_param = (high_param_bound + low_param_bound) / 2.0
        new_funct_ys = single_var_function(xs, new_param)
        peak_position_surmised = 0
        randomly_determined_modes = []
        n_rand_samples = 0
        while not (peak_position_surmised or has_converged):
            n_rand_samples = n_rand_samples + 1
            noised_funct_ys = np.random.normal(new_function_ys, y_errs) 
            randomly_determined_modes = randomly_determined_modes + [ApproximateFourierTransform(xs, noised_funct_ys, y_errs, frequencies = frequencies, windowing_funct = windowing_funct).normalized_coef_mags]
            mean_mags = np.mean(np.array(randomly_determined_modes), axis = 0)
            new_chi_sqr = sum([ ((true_mags[i] - mean_mags[i]) / widths[i]) ** 2.0 for i in range(len(true_mags)) ])
            
            if abs(new_chi_sqr - target_chi_sqr) >= min_chi_sqr_separation(n_rand_samples):
                if new_chi_sqr > target_chi_sqr:
                    print 'new_chi_sqr larger than target_chi_sqr'
                    print high_param_bound = new_param
                else:
                    print 'new_chi_sqr less than target_chi_sqr'
                    print low_param_bound = new_param
                peak_position_surmised = 1
            elif n_rand_samples > max_n_draw:
                print 'With parameter ' + str(new_param) + ', we have needed to iterate over ' + str(max_n_draw) + ' times to determine if peak is above or below target. '
                best_guess_param = new_param
                has_converged = 1
        print 'Peak position at param ' + str(new_param) + ' able to be distinguished from target. '

    return new_param 
        
    
