import numpy as np
import rawpy
import sys
from astropy.io import fits

"""
Modification history:
# 03/03/2021 - First written by Sasha Brownsberger.
#
A simple python script that takes in a .CR2 data file (the image format generated by Canon
    cameras) to a standard .fits image with a minimial header.  The program is designed to
    be run from the command line as follows:

$ file_to_convert=/Users/sashabrownsberger/Documents/Harvard/physics/stubbs/CBP/CrossSectionMeasurements/CU2A8899.CR2
$ python ConvertRawImageToFitsImage.py $file_to_convert
Reading in raw image /Users/sashabrownsberger/Documents/Harvard/physics/stubbs/CBP/CrossSectionMeasurements/CU2A8899.CR2
Saving data to bare-bones fits file /Users/sashabrownsberger/Documents/Harvard/physics/stubbs/CBP/CrossSectionMeasurements/CU2A8899.fits...
Done.

Note the full path to the data file must be specified when defining file_to_convert.  If only
    the file_name is given, without the full path, the script will look in the directory
    from which the script is executed.
"""


def saveDataToFitsFile(fits_data, file_name, save_dir, header = 'default', overwrite = True, n_mosaic_extensions = 0, data_type = 'image', col_names = [], col_formats = None):
    """
    Save data to a fits file.  This data could be either a fits image, in which case the
       data to be saved will be a data array and (optionally) a header, or a data table,
       in which case the data to be saved will be a data array and (not optionally) names
       of the columns, specified by the col_names variable.
    [NOTE TO THOSE USING IN THE ConvertRawImageToFitsImage.py FILE]
    Much of the functionality here is not used, since you are not working with a mosaic image
        nor reading in a fits data table.
    """
    if header is 'default':
        default_file = '/Users/sashabrownsberger/Documents/sashas_python_scripts/general_purpose/extra_files/' + 'default.fits'
        hdul  = fits.open(default_file)
        if n_mosaic_extensions <= 1:
            header = hdul[0].header
        else:
            header = [hdul[0].header for i in range(n_mosaic_extensions + 1)]

    if data_type in ['image', 'Image', 'IMAGE', 'img', 'Img', 'IMG']:
        if n_mosaic_extensions <= 1:
            master_hdu = fits.PrimaryHDU(fits_data.transpose(), header = header)
            master_hdul = fits.HDUList([master_hdu])
        else:
            master_hdus = [fits.PrimaryHDU(header = header[0])] + [fits.ImageHDU(fits_data[i].transpose(), header = header[i+1]) for i in range(n_mosaic_extensions)]
            #print ('master_hdus = ' )
            #print ( master_hdus )
            master_hdul = fits.HDUList(master_hdus)
        master_hdul.writeto(save_dir + file_name, overwrite = overwrite)
    #data for a binary table should be a list of lists:
    # data = [DATA ELEMENTS IN EACH COLUMN]
    # if None, col_formats will be assigned their default double precision floating point
    elif data_type in ['table', 'Table', 'TABLE', 'tab', 'Tab', 'TAB']:
        default_col_format = 'J'
        if col_formats is None:
            col_formats = [default_col_format for array in fits_data]
        print ('col_formats = ' + str(col_formats))
        #for i in range(len(fits_data)):
        #    print ('[i, fits_data[i], col_formats[i], col_names[i]] = ' + str([i, fits_data[i], col_formats[i], col_names[i]]))
        print ('len(fits_data) = ' + str(len(fits_data)))
        col_objects = fits.ColDefs([fits.Column(name = col_names[i], format = col_formats[i], array = np.array(fits_data[i])) for i in range(len(fits_data))])
        master_hdu = fits.BinTableHDU.from_columns(col_objects)
        master_hdu.writeto(save_dir + file_name, overwrite = overwrite)
        #master_hdul = fits.HDUList([master_hdu])

    return 1

def readInRawImage(target_file, target_dir = ''):
    raw_object = rawpy.imread(target_dir + target_file)
    raw_array = raw_object.raw_image
    return raw_array

if __name__ == "__main__":
    command_line_args = sys.argv[1:]
    target_file = command_line_args[0]
    print ('Reading in raw image ' + target_file)
    data_array = readInRawImage(target_file)
    save_file_name = target_file.split('.')[0] + '.fits'
    print ('Saving data to bare-bones fits file ' + save_file_name + '...')
    saveDataToFitsFile(np.transpose(data_array), save_file_name, '', header = 'default', overwrite = True, n_mosaic_extensions = 0, data_type = 'image', col_names = [], col_formats = None)
    print ('Done.')
